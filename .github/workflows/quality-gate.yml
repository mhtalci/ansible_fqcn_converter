name: Quality Gate

"on":
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  MINIMUM_COVERAGE: 95
  MAXIMUM_COMPLEXITY: 10
  SECURITY_ISSUES_THRESHOLD: 0

jobs:
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage[toml]
        pip install -e .
    
    - name: Run tests with coverage
      run: |
        pytest --cov=fqcn_converter --cov-report=term-missing --cov-report=json --cov-fail-under=${{ env.MINIMUM_COVERAGE }}
    
    - name: Coverage comment
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: ${{ env.MINIMUM_COVERAGE }}
        MINIMUM_ORANGE: 80

  complexity-check:
    name: Complexity Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mccabe radon
    
    - name: Check cyclomatic complexity
      run: |
        flake8 src --max-complexity=${{ env.MAXIMUM_COMPLEXITY }} --select=C901
    
    - name: Generate complexity report
      run: |
        radon cc src --min=B --show-complexity --total-average
        radon mi src --min=B --show

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [coverage-check, complexity-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json -c pyproject.toml || true
        
        # Check if any high or medium severity issues were found
        HIGH_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json | jq -s length)
        MEDIUM_ISSUES=$(jq '.results[] | select(.issue_severity == "MEDIUM")' bandit-report.json | jq -s length)
        
        echo "High severity issues: $HIGH_ISSUES"
        echo "Medium severity issues: $MEDIUM_ISSUES"
        
        if [ "$HIGH_ISSUES" -gt "${{ env.SECURITY_ISSUES_THRESHOLD }}" ]; then
          echo "❌ Security gate failed: $HIGH_ISSUES high severity issues found"
          jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json
          exit 1
        fi
        
        if [ "$MEDIUM_ISSUES" -gt "${{ env.SECURITY_ISSUES_THRESHOLD }}" ]; then
          echo "⚠️  Warning: $MEDIUM_ISSUES medium severity issues found"
          jq '.results[] | select(.issue_severity == "MEDIUM")' bandit-report.json
        fi
        
        echo "✅ Security gate passed"
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        
        # Check if any vulnerabilities were found
        VULNERABILITIES=$(jq length safety-report.json)
        
        if [ "$VULNERABILITIES" -gt "${{ env.SECURITY_ISSUES_THRESHOLD }}" ]; then
          echo "❌ Dependency security gate failed: $VULNERABILITIES vulnerabilities found"
          cat safety-report.json
          exit 1
        fi
        
        echo "✅ Dependency security gate passed"
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    needs: [coverage-check, complexity-check, security-gate]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy black isort
        pip install types-PyYAML types-colorama types-setuptools
        pip install -e .
    
    - name: Check code formatting
      run: |
        echo "Checking code formatting with Black..."
        if ! black --check --diff src tests scripts; then
          echo "❌ Code formatting check failed"
          echo "Run 'black src tests scripts' to fix formatting issues"
          exit 1
        fi
        echo "✅ Code formatting check passed"
    
    - name: Check import sorting
      run: |
        echo "Checking import sorting with isort..."
        if ! isort --check-only --diff src tests scripts; then
          echo "❌ Import sorting check failed"
          echo "Run 'isort src tests scripts' to fix import sorting issues"
          exit 1
        fi
        echo "✅ Import sorting check passed"
    
    - name: Check linting
      run: |
        echo "Checking code quality with flake8..."
        flake8 src tests scripts --statistics --tee --output-file=flake8-report.txt
        
        # Check if any errors were found
        if [ -s flake8-report.txt ]; then
          ERROR_COUNT=$(wc -l < flake8-report.txt)
          echo "❌ Linting check failed: $ERROR_COUNT issues found"
          cat flake8-report.txt
          exit 1
        fi
        echo "✅ Linting check passed"
    
    - name: Check type annotations
      run: |
        echo "Checking type annotations with mypy..."
        if ! mypy src --junit-xml=mypy-report.xml; then
          echo "❌ Type checking failed"
          exit 1
        fi
        echo "✅ Type checking passed"
    
    - name: Upload quality reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          flake8-report.txt
          mypy-report.xml

  documentation-gate:
    name: Documentation Gate
    runs-on: ubuntu-latest
    needs: [coverage-check, complexity-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser sphinx-click sphinx-copybutton
        pip install -e .
    
    - name: Check documentation build
      run: |
        echo "Building documentation..."
        if [ -d "docs" ]; then
          cd docs
          if ! sphinx-build -W -b html . _build/html; then
            echo "❌ Documentation build failed"
            exit 1
          fi
          echo "✅ Documentation build passed"
        else
          echo "⚠️  No docs directory found, skipping documentation check"
        fi

  final-quality-gate:
    name: Final Quality Gate
    runs-on: ubuntu-latest
    needs: [coverage-check, complexity-check, security-gate, code-quality-gate, documentation-gate]
    if: always()
    
    steps:
    - name: Evaluate quality gate
      run: |
        echo "=== Quality Gate Results ==="
        echo "Coverage: ${{ needs.coverage-check.result }}"
        echo "Complexity: ${{ needs.complexity-check.result }}"
        echo "Security: ${{ needs.security-gate.result }}"
        echo "Code Quality: ${{ needs.code-quality-gate.result }}"
        echo "Documentation: ${{ needs.documentation-gate.result }}"
        echo "=========================="
        
        if [[ "${{ needs.coverage-check.result }}" != "success" || \
              "${{ needs.complexity-check.result }}" != "success" || \
              "${{ needs.security-gate.result }}" != "success" || \
              "${{ needs.code-quality-gate.result }}" != "success" || \
              "${{ needs.documentation-gate.result }}" != "success" ]]; then
          echo "❌ Quality gate FAILED!"
          echo ""
          echo "The following checks failed:"
          [[ "${{ needs.coverage-check.result }}" != "success" ]] && echo "  - Coverage check"
          [[ "${{ needs.complexity-check.result }}" != "success" ]] && echo "  - Complexity check"
          [[ "${{ needs.security-gate.result }}" != "success" ]] && echo "  - Security gate"
          [[ "${{ needs.code-quality-gate.result }}" != "success" ]] && echo "  - Code quality gate"
          [[ "${{ needs.documentation-gate.result }}" != "success" ]] && echo "  - Documentation gate"
          echo ""
          echo "Please fix the issues and try again."
          exit 1
        else
          echo "✅ Quality gate PASSED!"
          echo "All quality checks have passed successfully."
        fi