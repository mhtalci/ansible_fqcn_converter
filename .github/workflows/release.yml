name: üöÄ Release

"on":
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Detected version: $VERSION"
      
      - name: Validate version consistency
        run: |
          python scripts/version_manager.py validate
          
          # Check if version matches tag
          CURRENT_VERSION=$(python scripts/version_manager.py current --json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          EXPECTED_VERSION="${EXPECTED_VERSION#v}"  # Remove 'v' prefix
          
          if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch: current=$CURRENT_VERSION, expected=$EXPECTED_VERSION"
            exit 1
          fi
          
          echo "‚úÖ Version consistency validated"
      
      - name: Run quality checks
        run: |
          echo "üîç Running quality checks..."
          make quality-gate
      
      - name: Validate changelog
        run: |
          python scripts/changelog_generator.py validate
          echo "‚úÖ Changelog validation passed"

  build-artifacts:
    name: üèóÔ∏è Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine sphinx
          pip install -e ".[dev,docs]"
      
      - name: Build Python packages
        run: |
          echo "üèóÔ∏è Building Python packages..."
          python -m build
          
          echo "üì¶ Built packages:"
          ls -la dist/
      
      - name: Validate packages
        run: |
          echo "üîç Validating packages..."
          python -m twine check dist/*
          
          # Test installation
          python -m venv test_env
          source test_env/bin/activate
          pip install dist/*.whl
          fqcn-converter --version
          python -c "import fqcn_converter; print(f'‚úÖ Package import successful: {fqcn_converter.__version__}')"
          deactivate
          rm -rf test_env
      
      - name: Build documentation
        run: |
          echo "üìö Building documentation..."
          sphinx-build -b html docs docs/_build/html
          
          # Create documentation archive
          tar -czf "fqcn-converter-docs-${{ needs.validate-release.outputs.version }}.tar.gz" \
            -C docs/_build html
          
          echo "üìö Documentation archive created"
      
      - name: Generate release notes
        run: |
          echo "üìù Generating release notes..."
          python scripts/changelog_generator.py release-notes \
            "${{ needs.validate-release.outputs.version }}" \
            --output "RELEASE_NOTES_${{ needs.validate-release.outputs.version }}.md"
          
          echo "üìù Release notes generated"
      
      - name: Generate checksums
        run: |
          echo "üîê Generating checksums..."
          cd dist/
          sha256sum * > ../SHA256SUMS
          cd ..
          sha256sum *.tar.gz *.md >> SHA256SUMS
          
          echo "üîê Checksums generated:"
          cat SHA256SUMS
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            *.tar.gz
            *.md
            SHA256SUMS
          retention-days: 30

  test-artifacts:
    name: üß™ Test Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [validate-release, build-artifacts]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Test wheel installation
        run: |
          echo "üß™ Testing wheel installation on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
          
          # Find and install wheel
          if [ "$RUNNER_OS" = "Windows" ]; then
            WHEEL_FILE=$(ls dist/*.whl | head -1)
          else
            WHEEL_FILE=$(find dist -name "*.whl" | head -1)
          fi
          
          pip install "$WHEEL_FILE"
          
          # Test CLI
          fqcn-converter --version
          fqcn-converter --help
          
          # Test Python API
          python -c "
          import fqcn_converter
          from fqcn_converter import FQCNConverter
          converter = FQCNConverter()
          print(f'‚úÖ API test passed on ${{ matrix.os }} Python ${{ matrix.python-version }}')
          "
        shell: bash
      
      - name: Verify checksums
        run: |
          echo "üîç Verifying checksums..."
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Windows doesn't have sha256sum by default
            echo "‚ö†Ô∏è Skipping checksum verification on Windows"
          else
            sha256sum -c SHA256SUMS --ignore-missing
            echo "‚úÖ Checksums verified"
          fi
        shell: bash

  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, test-artifacts]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Prepare release assets
        run: |
          echo "üì¶ Preparing release assets..."
          
          # Create release directory
          mkdir -p release-assets
          
          # Copy all artifacts
          cp dist/* release-assets/
          cp *.tar.gz release-assets/
          cp SHA256SUMS release-assets/
          
          # List assets
          echo "üì¶ Release assets:"
          ls -la release-assets/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: "FQCN Converter ${{ needs.validate-release.outputs.version }}"
          body_path: "RELEASE_NOTES_${{ needs.validate-release.outputs.version }}.md"
          files: release-assets/*
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' || github.event.inputs.prerelease == 'true' }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update milestone progress
        run: |
          echo "üìä Updating milestone progress..."
          
          # Set up Python environment
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
          # Update milestone to completed
          VERSION="${{ needs.validate-release.outputs.version }}"
          python scripts/milestone_tracker.py update "$VERSION" 100 --status completed --update-roadmap || true
          
          echo "üìä Milestone updated"

  notify-release:
    name: üì¢ Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Prepare notification content
        id: notification
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          # Create notification message
          if [ "$IS_PRERELEASE" = "true" ]; then
            TITLE="üß™ FQCN Converter $VERSION Pre-release"
            MESSAGE="A new pre-release version of FQCN Converter is available for testing!"
          else
            TITLE="üöÄ FQCN Converter $VERSION Released"
            MESSAGE="A new version of FQCN Converter is now available!"
          fi
          
          # Read release notes summary (first few lines)
          SUMMARY=$(head -10 "RELEASE_NOTES_$VERSION.md" | tail -8)
          
          # Create full message
          FULL_MESSAGE="$MESSAGE

          $SUMMARY

          üì¶ **Installation (GitHub Only):**
          \`\`\`bash
          pip install --upgrade git+https://github.com/mhtalci/ansible_fqcn_converter.git
          \`\`\`

          üîó **Links:**
          - [Release Notes](https://github.com/mhtalci/ansible_fqcn_converter/releases/tag/$VERSION)
          - [Documentation](https://github.com/mhtalci/ansible_fqcn_converter#readme)
          - [Changelog](https://github.com/mhtalci/ansible_fqcn_converter/blob/main/CHANGELOG.md)
          "
          
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Discussion
        uses: abirismyname/create-discussion@v1.2.0
        with:
          title: ${{ steps.notification.outputs.title }}
          body: ${{ steps.notification.outputs.message }}
          repository-id: ${{ github.repository }}
          category-id: "announcements"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Future: Add Slack, Discord, or email notifications here
      - name: Log notification
        run: |
          echo "üì¢ Release notification sent:"
          echo "Title: ${{ steps.notification.outputs.title }}"
          echo "Version: ${{ needs.validate-release.outputs.version }}"
          echo "Pre-release: ${{ needs.validate-release.outputs.is_prerelease }}"

  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, notify-release]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "üéâ Release workflow completed!"
          echo "Version: ${{ needs.validate-release.outputs.version }}"
          echo "Pre-release: ${{ needs.validate-release.outputs.is_prerelease }}"
          echo "Status: ${{ needs.create-release.result }}"
          
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "‚úÖ Release created successfully"
          else
            echo "‚ùå Release creation failed"
          fi