name: Code Quality & Formatting

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-docstrings flake8-bugbear flake8-comprehensions flake8-simplify flake8-import-order
          pip install -e .

      - name: Run flake8 syntax check
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src tests scripts --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run comprehensive flake8 linting
        run: |
          flake8 src tests scripts --count --max-complexity=10 --max-line-length=88 --statistics

      - name: Upload linting results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-results
          path: flake8-report.txt

  format:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Check code formatting with black
        run: |
          black --check --diff --color src tests scripts

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff --color src tests scripts

      - name: Generate formatting suggestions
        if: failure()
        run: |
          echo "## üîß Formatting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run the following commands to fix formatting issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "black src tests scripts" >> $GITHUB_STEP_SUMMARY
          echo "isort src tests scripts" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install type checking tools
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-PyYAML types-colorama types-setuptools
          pip install -e .

      - name: Run mypy type checking
        run: |
          mypy src --strict --show-error-codes --show-error-context

      - name: Generate type checking report
        if: always()
        run: |
          mypy src --strict --show-error-codes --html-report mypy-report || true

      - name: Upload type checking report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: mypy-report/

  docstring-check:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle interrogate
          pip install -e .

      - name: Check docstring coverage
        run: |
          interrogate src --verbose --ignore-init-method --ignore-magic --ignore-module --fail-under=90

      - name: Check docstring style
        run: |
          pydocstyle src --convention=google

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, format, type-check, docstring-check]
    if: always()

    steps:
      - name: Generate quality summary
        run: |
          echo "## üìã Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | flake8 code style validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Formatting | ${{ needs.format.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | black & isort formatting check |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Checking | ${{ needs.type-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | mypy static type analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docstring-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | docstring coverage & style |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any quality check failed
        if: needs.lint.result != 'success' || needs.format.result != 'success' || needs.type-check.result != 'success' || needs.docstring-check.result != 'success'
        run: |
          echo "‚ùå One or more quality checks failed!"
          exit 1