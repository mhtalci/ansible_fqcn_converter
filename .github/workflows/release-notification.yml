name: 📢 Release Notifications

"on":
  release:
    types: [published]

jobs:
  notify-community:
    name: 📢 Notify Community
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract release information
        id: release_info
        run: |
          # Extract version from tag
          VERSION="${{ github.event.release.tag_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if prerelease
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          # Extract release type
          if [[ "$VERSION" =~ -alpha ]]; then
            echo "release_type=Alpha" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ -beta ]]; then
            echo "release_type=Beta" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ -rc ]]; then
            echo "release_type=Release Candidate" >> $GITHUB_OUTPUT
          elif [ "$IS_PRERELEASE" = "true" ]; then
            echo "release_type=Pre-release" >> $GITHUB_OUTPUT
          else
            echo "release_type=Release" >> $GITHUB_OUTPUT
          fi
          
          echo "Release info extracted:"
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"
      
      - name: Create announcement discussion
        uses: abirismyname/create-discussion@v1.2.0
        with:
          title: "🚀 ${{ steps.release_info.outputs.release_type }}: FQCN Converter ${{ steps.release_info.outputs.version }}"
          body: |
            # 🎉 FQCN Converter ${{ steps.release_info.outputs.version }} is now available!
            
            ${{ github.event.release.body }}
            
            ## 📦 Installation
            
            ```bash
            # Install or upgrade via pip
            pip install --upgrade fqcn-converter
            
            # Verify installation
            fqcn-converter --version
            ```
            
            ## 🔗 Quick Links
            
            - 📋 [Release Notes](${{ github.event.release.html_url }})
            - 📚 [Documentation](https://github.com/mhtalci/ansible_fqcn_converter#readme)
            - 🐛 [Report Issues](https://github.com/mhtalci/ansible_fqcn_converter/issues/new/choose)
            - 💬 [Discussions](https://github.com/mhtalci/ansible_fqcn_converter/discussions)
            
            ## 🙏 Feedback Welcome
            
            We'd love to hear about your experience with this release! Please share:
            - How you're using FQCN Converter
            - Any issues or suggestions
            - Success stories and use cases
            
            Thank you for being part of the FQCN Converter community! 🚀
          repository-id: ${{ github.repository }}
          category-id: "announcements"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update project documentation
        run: |
          echo "📚 Updating project documentation..."
          
          # This could trigger documentation updates, website updates, etc.
          # For now, we'll just log the action
          echo "Release ${{ steps.release_info.outputs.version }} documentation update triggered"
      
      # Future: Add integrations for other notification channels
      - name: Prepare external notifications
        id: external_notifications
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          RELEASE_TYPE="${{ steps.release_info.outputs.release_type }}"
          IS_PRERELEASE="${{ steps.release_info.outputs.is_prerelease }}"
          
          # Prepare notification content for external channels
          if [ "$IS_PRERELEASE" = "true" ]; then
            EMOJI="🧪"
            URGENCY="low"
          else
            EMOJI="🚀"
            URGENCY="normal"
          fi
          
          TITLE="$EMOJI FQCN Converter $VERSION $RELEASE_TYPE"
          MESSAGE="New version available! Check out the latest features and improvements."
          
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "urgency=$URGENCY" >> $GITHUB_OUTPUT
          
          # Log prepared notifications
          echo "External notification prepared:"
          echo "Title: $TITLE"
          echo "Message: $MESSAGE"
          echo "Urgency: $URGENCY"
      
      # Placeholder for future integrations
      - name: Log notification completion
        run: |
          echo "📢 Release notifications completed for ${{ steps.release_info.outputs.version }}"
          echo "Type: ${{ steps.release_info.outputs.release_type }}"
          echo "Pre-release: ${{ steps.release_info.outputs.is_prerelease }}"

  update-metrics:
    name: 📊 Update Release Metrics
    runs-on: ubuntu-latest
    needs: notify-community
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Update milestone tracking
        run: |
          echo "📊 Updating milestone tracking..."
          
          VERSION="${{ github.event.release.tag_name }}"
          
          # Update milestone progress to 100% and mark as completed
          python scripts/milestone_tracker.py update "$VERSION" 100 --status completed --update-roadmap || {
            echo "⚠️ Milestone update failed (milestone may not exist yet)"
          }
          
          echo "📊 Milestone tracking updated"
      
      - name: Generate release metrics
        run: |
          echo "📈 Generating release metrics..."
          
          VERSION="${{ github.event.release.tag_name }}"
          
          # Create metrics file
          cat > release_metrics.json << EOF
          {
            "version": "$VERSION",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "is_prerelease": ${{ github.event.release.prerelease }},
            "github_release_url": "${{ github.event.release.html_url }}",
            "assets_count": ${{ github.event.release.assets | length }},
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF
          
          echo "📈 Release metrics generated:"
          cat release_metrics.json
      
      - name: Archive metrics
        uses: actions/upload-artifact@v4
        with:
          name: release-metrics-${{ github.event.release.tag_name }}
          path: release_metrics.json
          retention-days: 90

  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Validate release assets
        run: |
          echo "🔍 Validating release assets..."
          
          # Check that required assets are present
          REQUIRED_ASSETS=(
            "fqcn_converter-.*-py3-none-any.whl"
            "fqcn-converter-.*\.tar\.gz"
            "SHA256SUMS"
          )
          
          ASSETS_JSON='${{ toJson(github.event.release.assets) }}'
          
          for pattern in "${REQUIRED_ASSETS[@]}"; do
            if echo "$ASSETS_JSON" | jq -r '.[].name' | grep -q "$pattern"; then
              echo "✅ Found asset matching: $pattern"
            else
              echo "❌ Missing asset matching: $pattern"
              exit 1
            fi
          done
          
          echo "✅ All required assets are present"
      
      - name: Test release installation
        run: |
          echo "🧪 Testing release installation..."
          
          # Find wheel asset URL
          WHEEL_URL=$(echo '${{ toJson(github.event.release.assets) }}' | \
            jq -r '.[] | select(.name | test(".*\\.whl$")) | .browser_download_url')
          
          if [ -z "$WHEEL_URL" ]; then
            echo "❌ No wheel file found in release assets"
            exit 1
          fi
          
          echo "📦 Installing from: $WHEEL_URL"
          
          # Install from release
          pip install "$WHEEL_URL"
          
          # Test installation
          fqcn-converter --version
          python -c "import fqcn_converter; print(f'✅ Installation test passed: {fqcn_converter.__version__}')"
          
          echo "✅ Release installation test passed"