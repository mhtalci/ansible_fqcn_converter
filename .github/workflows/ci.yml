name: CI

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-xdist pytest-timeout
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest --cov=fqcn_converter --cov-report=xml --cov-report=term-missing --cov-report=html --timeout=300 -n auto

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            .coverage
            coverage.xml

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-docstrings flake8-bugbear flake8-comprehensions flake8-simplify
          pip install black isort mypy bandit[toml] safety
          pip install types-PyYAML types-colorama types-setuptools
          pip install -e .

      - name: Run flake8 linting
        run: |
          flake8 src tests scripts --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests scripts --count --max-complexity=10 --max-line-length=88 --statistics

      - name: Check code formatting with black
        run: black --check --diff src tests scripts

      - name: Check import sorting with isort
        run: isort --check-only --diff src tests scripts

      - name: Run mypy type checking
        run: mypy src

      - name: Run bandit security scan
        run: bandit -r src -c pyproject.toml

      - name: Check dependencies for vulnerabilities
        run: safety check --json

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, quality-checks]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock
          pip install -e .

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --tb=short

  build:
    name: Build & Validate Package
    runs-on: ubuntu-latest
    needs: [test, quality-checks, integration-tests]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: Check manifest
        run: check-manifest

      - name: Build source distribution
        run: python -m build --sdist

      - name: Build wheel distribution
        run: python -m build --wheel

      - name: Check package integrity
        run: twine check dist/*

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import fqcn_converter; print(fqcn_converter.__version__)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 30

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, quality-checks, integration-tests, build]
    if: always()

    steps:
      - name: Evaluate quality gate
        run: |
          echo "=== Quality Gate Results ==="
          echo "Test Suite: ${{ needs.test.result }}"
          echo "Quality Checks: ${{ needs.quality-checks.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build & Validation: ${{ needs.build.result }}"
          echo "=========================="

          if [[ "${{ needs.test.result }}" != "success" || \
                "${{ needs.quality-checks.result }}" != "success" || \
                "${{ needs.integration-tests.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gate FAILED!"
            echo "One or more required checks did not pass."
            exit 1
          else
            echo "✅ Quality gate PASSED!"
            echo "All required checks completed successfully."
          fi

      - name: Post quality gate summary
        if: always()
        run: |
          echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Validation | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY