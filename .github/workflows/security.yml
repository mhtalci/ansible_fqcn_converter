name: Security Scanning

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  bandit-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run bandit security scan
        run: |
          bandit -r src -f json -o bandit-report.json -c pyproject.toml
          bandit -r src -f txt -c pyproject.toml

      - name: Upload bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Generate security summary
        if: always()
        run: |
          if [ -f bandit-report.json ]; then
            echo "## üîí Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
            import json
            try:
                with open('bandit-report.json', 'r') as f:
                    data = json.load(f)
                    metrics = data.get('metrics', {})
                    total_issues = sum(metrics.get('_totals', {}).values())
                    print(f'Total security issues found: {total_issues}')
                    if total_issues > 0:
                        print('‚ö†Ô∏è Security issues detected! Please review the detailed report.')
                    else:
                        print('‚úÖ No security issues detected.')
            except Exception as e:
                print(f'Error parsing bandit report: {e}')
            " >> $GITHUB_STEP_SUMMARY
          fi

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Install project dependencies
        run: |
          pip install -e .

      - name: Run safety dependency scan
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report

      - name: Upload safety results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-vulnerability-report
          path: safety-report.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install license checking tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck

      - name: Install project dependencies
        run: |
          pip install -e .

      - name: Check dependency licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=plain-vertical

      - name: Validate license compatibility
        run: |
          # Check for incompatible licenses (GPL, AGPL, etc.)
          python -c "
          import json
          with open('licenses.json', 'r') as f:
              licenses = json.load(f)
          
          incompatible = ['GPL', 'AGPL', 'LGPL']
          issues = []
          
          for pkg in licenses:
              license_name = pkg.get('License', '').upper()
              for incompat in incompatible:
                  if incompat in license_name:
                      issues.append(f\"{pkg['Name']}: {pkg['License']}\")
          
          if issues:
              print('‚ùå Incompatible licenses found:')
              for issue in issues:
                  print(f'  - {issue}')
              exit(1)
          else:
              print('‚úÖ All dependency licenses are compatible')
          "

      - name: Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: licenses.json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bandit-scan, dependency-scan, license-check, codeql-analysis, secrets-scan]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "## üõ°Ô∏è Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Bandit Code Scan | ${{ needs.bandit-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Static security analysis of Python code |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Known vulnerability check for dependencies |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | License compatibility validation |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Advanced security and quality analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Scan for exposed secrets and credentials |" >> $GITHUB_STEP_SUMMARY

      - name: Create security issue if scans fail
        if: needs.bandit-scan.result != 'success' || needs.dependency-scan.result != 'success' || needs.license-check.result != 'success' || needs.codeql-analysis.result != 'success' || needs.secrets-scan.result != 'success'
        run: |
          echo "‚ö†Ô∏è Security scan failures detected!"
          echo "Please review the security reports and address any identified issues."
          
          # In a real scenario, you might want to create a GitHub issue or send notifications
          echo "Failed scans:"
          echo "- Bandit: ${{ needs.bandit-scan.result }}"
          echo "- Dependencies: ${{ needs.dependency-scan.result }}"
          echo "- Licenses: ${{ needs.license-check.result }}"
          echo "- CodeQL: ${{ needs.codeql-analysis.result }}"
          echo "- Secrets: ${{ needs.secrets-scan.result }}"